name: Homelab GitOps Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/argocd-apps/**'
      - 'apps/k8s-apps/**'
      - '.github/workflows/gitops-deploy.yml'
  workflow_dispatch:

jobs:
  gitops:
    name: Deploy ArgoCD + Sync All Apps
    runs-on: self-hosted   # your self-hosted runner

    env:
      ARGOCD_NAMESPACE: argocd
      ARGOCD_CHART_VERSION: 7.7.10
      GIT_REPO_URL: git@github.com:cterence/homelab-gitops.git
      KUBECONFIG: ${{ github.workspace }}/kubeconfig  # this is where we'll write the secret

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Load SSH key (for private repo access)
      - name: Load SSH Private Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3Ô∏è‚É£ Configure known_hosts (to trust GitHub SSH fingerprint)
      - name: Configure SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # 4Ô∏è‚É£ Write kubeconfig from secret
      - name: Write kubeconfig file
        run: |
          echo "${{ secrets.K3S_KUBECONFIG }}" > $KUBECONFIG
          chmod 600 $KUBECONFIG
          echo "‚úÖ Wrote kubeconfig to $KUBECONFIG"

      # 5Ô∏è‚É£ Verify Kubernetes connection
      - name: Verify Kubernetes Cluster
        run: |
          echo "üîç Checking Kubernetes context..."
          kubectl cluster-info
          kubectl get nodes -o wide

      # 6Ô∏è‚É£ Ensure ArgoCD namespace exists
      - name: Create ArgoCD namespace if missing
        run: |
          kubectl get ns $ARGOCD_NAMESPACE || kubectl create ns $ARGOCD_NAMESPACE

      # 7Ô∏è‚É£ Install or upgrade ArgoCD
      - name: Install or upgrade ArgoCD with Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm || true
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            --namespace $ARGOCD_NAMESPACE \
            --version $ARGOCD_CHART_VERSION \
            --set server.service.type=LoadBalancer \
            --set configs.params."server.insecure"=true

      # 8Ô∏è‚É£ Wait until ArgoCD server is ready
      - name: Wait for ArgoCD server
        run: |
          echo "‚è≥ Waiting for ArgoCD server deployment..."
          kubectl -n $ARGOCD_NAMESPACE wait --for=condition=available deployment/argocd-server --timeout=600s

      # 9Ô∏è‚É£ Apply App-of-Apps manifest
      - name: Apply App-of-Apps manifest
        run: |
          echo "üöÄ Applying App-of-Apps bootstrap..."
          kubectl apply -f apps/argocd-apps/app-of-apps.yaml

      # üîç 10Ô∏è‚É£ Check Application registration
      - name: Verify App-of-Apps registration
        run: |
          echo "üîç Checking ArgoCD Application..."
          kubectl -n $ARGOCD_NAMESPACE get app app-of-apps || echo "App-of-Apps not yet created."

      # üîÑ 11Ô∏è‚É£ Force refresh/sync for all ArgoCD apps
      - name: Force sync ArgoCD Applications
        run: |
          echo "üîÑ Triggering ArgoCD refresh..."
          kubectl -n $ARGOCD_NAMESPACE get applications.argoproj.io -o name | \
          xargs -I{} kubectl -n $ARGOCD_NAMESPACE patch {} --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}'
          echo "‚úÖ ArgoCD Applications refreshed and syncing."

      # üîë 12Ô∏è‚É£ Display ArgoCD Admin password
      - name: Show ArgoCD Admin Password
        run: |
          echo "üîë ArgoCD Admin Password:"
          kubectl -n $ARGOCD_NAMESPACE get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d
