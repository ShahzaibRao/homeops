name: GitOps Bootstrap - ArgoCD + Cloudflare Tunnel + ExternalDNS

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  bootstrap:
    runs-on: self-hosted  # use your self-hosted runner

    steps:
      - uses: actions/checkout@v4

      - name: üß© Install prerequisites (gh, jq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          type gh >/dev/null 2>&1 || (
            curl -fsSL https://github.com/cli/cli/releases/latest/download/gh_$(curl -s https://api.github.com/repos/cli/cli/releases/latest | jq -r '.tag_name' | sed 's/v//')_linux_amd64.tar.gz -o gh.tar.gz
            tar xzf gh.tar.gz
            sudo cp gh_*/bin/gh /usr/local/bin/
          )

      - name: üß∞ Setup kubectl & Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.15.0"

      - name: ‚öôÔ∏è Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K3S_KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      # ---------------------------------------------------
      # STEP 1: Check or Create Cloudflare Tunnel
      # ---------------------------------------------------
      - name: üåê Ensure Cloudflare Tunnel exists
        id: ensure_tunnel
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          echo "üîé Checking for existing tunnel credentials secret..."
          
          # Try to read existing tunnel ID secret
          EXISTING_TUNNEL_ID=$(gh secret list | grep CLOUDFLARE_TUNNEL_ID || true)
          
          if [ -z "$EXISTING_TUNNEL_ID" ]; then
            echo "üÜï No tunnel found, creating new one..."
            
            RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/cfd_tunnel" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data '{"name": "gitops-k3s-tunnel"}')

            echo "$RESPONSE" | jq .
            TUNNEL_ID=$(echo "$RESPONSE" | jq -r '.result.id')

            echo "TUNNEL_ID=$TUNNEL_ID" >> $GITHUB_ENV
            echo "Tunnel created: $TUNNEL_ID"

            # Download credentials JSON
            curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/cfd_tunnel/${TUNNEL_ID}/credentials" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -o tunnel.json

            # Save both ID and JSON as GitHub Secrets for future runs
            echo "üì¶ Saving tunnel ID and credentials JSON as GitHub Secrets..."
            gh secret set CLOUDFLARE_TUNNEL_ID --body "$TUNNEL_ID"
            gh secret set CLOUDFLARE_TUNNEL_CRED_JSON --body "$(cat tunnel.json)"
          else
            echo "‚úÖ Existing tunnel found. Using stored GitHub secrets."
            echo "TUNNEL_ID=${{ secrets.CLOUDFLARE_TUNNEL_ID }}" >> $GITHUB_ENV
            echo "${{ secrets.CLOUDFLARE_TUNNEL_CRED_JSON }}" > tunnel.json
          fi

      # ---------------------------------------------------
      # STEP 2: Create Kubernetes Namespaces & Secrets
      # ---------------------------------------------------
      - name: üîê Create Namespaces and Secrets
        run: |
          kubectl create ns infra --dry-run=client -o yaml | kubectl apply -f -
          kubectl create ns external-dns --dry-run=client -o yaml | kubectl apply -f -
          kubectl create ns argocd --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic tunnel-credentials \
            -n infra --from-file=credentials.json=tunnel.json \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic cloudflare-api-token \
            -n external-dns \
            --from-literal=api-token=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # ---------------------------------------------------
      # STEP 3: Add Helm Repositories
      # ---------------------------------------------------
      - name: ü™£ Add Helm Repositories
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo add cloudflare https://cloudflare.github.io/helm-charts
          helm repo add kubernetes-sigs https://kubernetes-sigs.github.io/external-dns/
          helm repo update

      # ---------------------------------------------------
      # STEP 4: Install ArgoCD
      # ---------------------------------------------------
      - name: üöÄ Install ArgoCD
        run: |
          cat <<EOF > argocd-values.yaml
          server:
            ingress:
              enabled: true
              ingressClassName: traefik
              hosts:
                - argocd.raoshahzaib.site
              annotations:
                external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
                external-dns.alpha.kubernetes.io/hostname: argocd.raoshahzaib.site
                external-dns.alpha.kubernetes.io/target: $TUNNEL_ID.cfargotunnel.com
          EOF

          helm upgrade --install argocd argo/argo-cd -n argocd -f argocd-values.yaml --wait

      # ---------------------------------------------------
      # STEP 5: Install Cloudflare Tunnel
      # ---------------------------------------------------
      - name: ‚òÅÔ∏è Install Cloudflare Tunnel
        run: |
          cat <<EOF > tunnel-values.yaml
          credentials:
            existingSecret: tunnel-credentials
          tunnel:
            name: "gitops-k3s-tunnel"
            id: "$TUNNEL_ID"
          ingress:
            - hostname: "*.raoshahzaib.site"
              service: https://traefik.kube-system.svc.cluster.local:443
              originRequest:
                noTLSVerify: true
            - service: http_status:404
          EOF

          helm upgrade --install cloudflare cloudflare/cloudflare-tunnel \
            --namespace infra \
            --values tunnel-values.yaml \
            --wait

      # ---------------------------------------------------
      # STEP 6: Install ExternalDNS
      # ---------------------------------------------------
      - name: üåç Install ExternalDNS
        run: |
          cat <<EOF > externaldns-values.yaml
          provider:
            name: cloudflare
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-token
              key: api-token
          sources:
            - ingress
          policy: sync
          registry: txt
          txtOwnerId: k3s-gitops
          domainFilters:
            - raoshahzaib.site
          EOF

          helm upgrade --install external-dns kubernetes-sigs/external-dns \
            -n external-dns \
            -f externaldns-values.yaml \
            --wait

      # ---------------------------------------------------
      # STEP 7: Verify Everything
      # ---------------------------------------------------
      - name: ‚úÖ Show Running Pods
        run: kubectl get pods -A
